/**
 * This class is generated by jOOQ
 */
package com.grb.indonesia.entity.tables;


import com.grb.indonesia.entity.Keys;
import com.grb.indonesia.entity.Pinpoint;
import com.grb.indonesia.entity.tables.records.BatchJobExecutionRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobExecution extends TableImpl<BatchJobExecutionRecord> {

    private static final long serialVersionUID = -1215070762;

    /**
     * The reference instance of <code>pinpoint.BATCH_JOB_EXECUTION</code>
     */
    public static final BatchJobExecution BATCH_JOB_EXECUTION = new BatchJobExecution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobExecutionRecord> getRecordType() {
        return BatchJobExecutionRecord.class;
    }

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.JOB_EXECUTION_ID</code>.
     */
    public final TableField<BatchJobExecutionRecord, Long> JOB_EXECUTION_ID = createField("JOB_EXECUTION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.VERSION</code>.
     */
    public final TableField<BatchJobExecutionRecord, Long> VERSION = createField("VERSION", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.JOB_INSTANCE_ID</code>.
     */
    public final TableField<BatchJobExecutionRecord, Long> JOB_INSTANCE_ID = createField("JOB_INSTANCE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.CREATE_TIME</code>.
     */
    public final TableField<BatchJobExecutionRecord, Timestamp> CREATE_TIME = createField("CREATE_TIME", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.START_TIME</code>.
     */
    public final TableField<BatchJobExecutionRecord, Timestamp> START_TIME = createField("START_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.END_TIME</code>.
     */
    public final TableField<BatchJobExecutionRecord, Timestamp> END_TIME = createField("END_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.STATUS</code>.
     */
    public final TableField<BatchJobExecutionRecord, String> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.EXIT_CODE</code>.
     */
    public final TableField<BatchJobExecutionRecord, String> EXIT_CODE = createField("EXIT_CODE", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.EXIT_MESSAGE</code>.
     */
    public final TableField<BatchJobExecutionRecord, String> EXIT_MESSAGE = createField("EXIT_MESSAGE", org.jooq.impl.SQLDataType.VARCHAR.length(2500), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION.LAST_UPDATED</code>.
     */
    public final TableField<BatchJobExecutionRecord, Timestamp> LAST_UPDATED = createField("LAST_UPDATED", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>pinpoint.BATCH_JOB_EXECUTION</code> table reference
     */
    public BatchJobExecution() {
        this("BATCH_JOB_EXECUTION", null);
    }

    /**
     * Create an aliased <code>pinpoint.BATCH_JOB_EXECUTION</code> table reference
     */
    public BatchJobExecution(String alias) {
        this(alias, BATCH_JOB_EXECUTION);
    }

    private BatchJobExecution(String alias, Table<BatchJobExecutionRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchJobExecution(String alias, Table<BatchJobExecutionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pinpoint.PINPOINT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BatchJobExecutionRecord> getPrimaryKey() {
        return Keys.KEY_BATCH_JOB_EXECUTION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BatchJobExecutionRecord>> getKeys() {
        return Arrays.<UniqueKey<BatchJobExecutionRecord>>asList(Keys.KEY_BATCH_JOB_EXECUTION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BatchJobExecutionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BatchJobExecutionRecord, ?>>asList(Keys.JOB_INST_EXEC_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchJobExecution as(String alias) {
        return new BatchJobExecution(alias, this);
    }

    /**
     * Rename this table
     */
    public BatchJobExecution rename(String name) {
        return new BatchJobExecution(name, null);
    }
}
