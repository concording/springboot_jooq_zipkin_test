/**
 * This class is generated by jOOQ
 */
package com.grb.indonesia.jooq.data.jooq.tables;


import com.grb.indonesia.jooq.data.jooq.Keys;
import com.grb.indonesia.jooq.data.jooq.Pinpoint;
import com.grb.indonesia.jooq.data.jooq.tables.records.BatchJobExecutionParamsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BatchJobExecutionParams extends TableImpl<BatchJobExecutionParamsRecord> {

    private static final long serialVersionUID = -2042632624;

    /**
     * The reference instance of <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS</code>
     */
    public static final BatchJobExecutionParams BATCH_JOB_EXECUTION_PARAMS = new BatchJobExecutionParams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BatchJobExecutionParamsRecord> getRecordType() {
        return BatchJobExecutionParamsRecord.class;
    }

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.JOB_EXECUTION_ID</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, Long> JOB_EXECUTION_ID = createField("JOB_EXECUTION_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.TYPE_CD</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> TYPE_CD = createField("TYPE_CD", org.jooq.impl.SQLDataType.VARCHAR.length(6).nullable(false), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.KEY_NAME</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> KEY_NAME = createField("KEY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.STRING_VAL</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> STRING_VAL = createField("STRING_VAL", org.jooq.impl.SQLDataType.VARCHAR.length(250), this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.DATE_VAL</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, Timestamp> DATE_VAL = createField("DATE_VAL", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.LONG_VAL</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, Long> LONG_VAL = createField("LONG_VAL", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.DOUBLE_VAL</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, Double> DOUBLE_VAL = createField("DOUBLE_VAL", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS.IDENTIFYING</code>.
     */
    public final TableField<BatchJobExecutionParamsRecord, String> IDENTIFYING = createField("IDENTIFYING", org.jooq.impl.SQLDataType.CHAR.length(1).nullable(false), this, "");

    /**
     * Create a <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS</code> table reference
     */
    public BatchJobExecutionParams() {
        this("BATCH_JOB_EXECUTION_PARAMS", null);
    }

    /**
     * Create an aliased <code>pinpoint.BATCH_JOB_EXECUTION_PARAMS</code> table reference
     */
    public BatchJobExecutionParams(String alias) {
        this(alias, BATCH_JOB_EXECUTION_PARAMS);
    }

    private BatchJobExecutionParams(String alias, Table<BatchJobExecutionParamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private BatchJobExecutionParams(String alias, Table<BatchJobExecutionParamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pinpoint.PINPOINT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<BatchJobExecutionParamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BatchJobExecutionParamsRecord, ?>>asList(Keys.JOB_EXEC_PARAMS_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BatchJobExecutionParams as(String alias) {
        return new BatchJobExecutionParams(alias, this);
    }

    /**
     * Rename this table
     */
    public BatchJobExecutionParams rename(String name) {
        return new BatchJobExecutionParams(name, null);
    }
}
